#!/usr/bin/env bash
# -*- bash -*-
#
#!/usr/bin/env node
# -*- js   -*-
#
#!/usr/bin/env lua
# -*- js   -*-
#
cmd=$1
set -u -e -o pipefail

install_luarocks=https://raw.github.com/da99/boot_ups/master/bin/install/luarocks
luarocks=".rocks/bin/luarocks"
bundle=".rocks/bundle.txt"
this="$(pwd)"
me="$0"
me_bin="$(dirname $me)"
me_prefix="$(dirname $me_bin)"
apps="$(dirname $me_prefix)"

lua_rocks=conf/lua_rocks
deploy_rocks=conf/lua_rocks.deploy
install_rock="luarocks install --tree=.rocks"

function print_rockspec() {
  file=""
  if [[ -f .rockspec ]]
  then
    file=".rockspec"
  else
    if [[ -f rockspec ]]
    then
      file=rockspec
    fi
  fi
  if [[ -z "$file" ]]
  then
    echo "One of these is required: rockspec , .rockspec" 1>&2
    exit 1
  else
    echo $file
  fi
}


function read_rocks() {
  rocks=$(cat conf/lua_rocks)
}

function remove_rocks() {
  if [[ -d .rocks ]]
  then
    trash-put .rocks
  fi
}

function install_all() {
  read_rocks
  for rock in $rocks
  do
     $install_rock $rock
  done
}


function install_config_file() {
config_content="
rocks_servers = {
  [[http://luarocks.org/repositories/rocks]],
  [[http://rocks.moonscript.org]],
  [[https://raw.github.com/da99/rocks/master/rocks]]
}

rocks_trees = {
  [[$(pwd)/.rocks]]
}
"
  config=$(ls .rocks/etc/luarocks/config-*.lua | tail -n 1)
  if [[ ! -f $config ]]
  then
    echo "LuaRocks config file not found." 1>&2
    exit 1
  fi

  cp $config $config.backup
  echo "$config_content" > $config
  echo "Config file updated: $config"
}

function push_rock () {
  git push
  cp rockspec /apps/rocks/rocks/$(lrm rockspec filename)
  luarocks make --pack-binary-rock

  mv *.rock /apps/rocks/rocks

  cd /apps/rocks
  luarocks-admin make-manifest rocks

  git add rocks/*
  if [[ ! -z "$(git status --porcelain)" ]]
  then
    git commit -m "Added: new rockspecs"
    git push origin master
  fi
}

function init() {
  if [[ -f .rocks/bin/luarocks ]]
  then
    echo "LuaRocks already installed."
  else
    mkdir -p .rocks
    echo -e "\n=== Installing into $(pwd)/.rocks"
    curl -fsS -L $install_luarocks | bash > /dev/null
    echo -e "Done.\n"
  fi

  touch .gitignore
  dir="/.rocks/"
  if ! grep --quiet "^$dir$" .gitignore
  then
    echo "$dir" >> .gitignore
  fi

  install_config_file
  echo -e "lrm init is done.\n"
}

case "$1" in

  # === Installing lua rocks... ===========================================

  list)
    for file in .rocks/lib/luarocks/rocks/*/
    do
      for v in ${file}*
      do
        echo $(basename $file) $(basename $v)
      done
    done
    ;;

  print_rockspec)
    print_rockspec
    ;;

  print_package_name)
    echo "$(lua -e "f=loadfile '$(print_rockspec)'; f(); print(package)")"
    ;;

  install_bundle)
    if [[ ! -f $bundle ]]
    then
      echo "No file found: $bundle"
      exit 0
    fi
    # === From:
    #     http://en.kioskea.net/faq/1757-how-to-read-a-file-line-by-line
    cat $bundle | while read r
    do
      echo -e "\n=== Installing: $r"
      $luarocks install $r 
    done
    ;;

  git_add_bundle)
    $0 list > $bundle
    git add -f $bundle
    echo -e "=== added:\n$bundle"
    ;;

  install_deps)
    install_from_rockspec
    ;;

  install)
    .rocks/bin/luarocks install "$@"
    ;;

  update_all)
    remove_rocks
    install_all
    ;;

  install_config_file) install_config_file
    ;;

  init) init
    ;;

  # === Deploying an app... ===============================================

  generate_deploy)
    lrm list_installed > $deploy_rocks
    cat $deploy_rocks
    ;;

  install_deploy)
    rocks="$(cat $deploy_rocks)"
    cat $deploy_rocks | while read line; do
      echo -e "Installing: $line\n"
      $install_rock $line
    done
    ;;

  list_installed)
    dir=.rocks/lib/luarocks/rocks
    cur=$(pwd)
    cd $dir
    for r in *
    do
      rock=$cur/$dir/$r
      if [[ -d $rock ]]
      then
        cd $rock
        for v in *
        do
          echo $r $v
        done
      fi
    done
    ;;

  # === Publishing a lua app... ===========================================

  version) lua -e  "dofile('rockspec'); print(version)"
    ;;

  push_rock) push_rock
    ;;

  rockspec)
    case "$2" in
      filename)
        lua -e  "dofile('rockspec'); print(package .. '-' .. version .. '.rockspec')"
        ;;
      *) echo "unknown command for rockspec: $2"
        exit 1
        ;;
    esac
    ;;

  bump)
    if [[ ! -z "$(git status --porcelain)" ]]
    then
      echo "Git repo not clean enough."
      exit 1
    fi
    cmd=$2
    old=$(lrm version)
    new=$(bump_lua_rock_ver $(lrm version) $cmd)

    sed -i -e "s/\([^0-9]\)$old\([^0-9]\)/\1$new\2/g" rockspec
    git add rockspec
    git commit -m "$new (bumped $cmd)"
    git tag "v$new"
    echo "$new"
    ;;

  *) echo "Unknown command: $@"
    exit 1
    ;;

esac


